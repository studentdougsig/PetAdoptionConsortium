/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package petadoptionconsortium;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.util.Vector;
import java.lang.Integer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static petadoptionconsortium.ShelterSearchResults.zipCode;

/**
 *
 * @author Doug
 */
public class AdoptionsInformation extends javax.swing.JPanel {

    /**
     * Creates new form AdoptionsInformation
     */
    private TableModel table;
    public AdoptionsInformation() {
        Connection connection = null;
        PreparedStatement pstatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        ResultSetMetaData metaData = null;
        int numberOfColumns = 0;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            connection = DriverManager.getConnection(PetAdoptionConsortium.CONN_STRING,"root","");
            //autocommit = false;
            statement = connection.createStatement();
            String year;
            String month;
            String day;
            Vector rows = new Vector();
            Vector columnNames = new Vector();
            if (AdoptionsInformationDate.buttonPressed) {
                year = AdoptionsInformationDate.adoptionsInformationDateSearch.split("-")[0];
                month = AdoptionsInformationDate.adoptionsInformationDateSearch.split("-")[1];
                day = AdoptionsInformationDate.adoptionsInformationDateSearch.split("-")[2];
                String query = "SELECT P.AdopterName, A.DOB, P.AdopterPhone, A.Address, P.PetID,\n" +
                        "IF(P.Catbreed=?, ?, ?) AS Type \n" +
                        "FROM Pet AS P INNER JOIN Adopter AS A ON (P.AdopterName = A.Pname AND P.AdopterPhone = A.Pphone)\n" +
                        "WHERE Year(P.AdoptionDate) = ? AND Month(P.AdoptionDate) = ? AND Day(P.AdoptionDate) = ? AND P.ShelterName = ?"
                        +"ORDER BY P.PetID";
                pstatement = connection.prepareStatement(query);
                System.out.println(year);
                System.out.println(month);
                System.out.println(day);
                pstatement.setString(1,"");
                pstatement.setString(2,"Dog");
                pstatement.setString(3,"Cat");
                pstatement.setString(4,""+year);
                pstatement.setString(5,""+month);
                pstatement.setString(6,""+day);
                pstatement.setString(7,PetAdoptionConsortium.shelterName);
            
                resultSet = pstatement.executeQuery();
                metaData = resultSet.getMetaData();
                numberOfColumns = metaData.getColumnCount();
                for (int column = 0; column < numberOfColumns; column++) {
                    columnNames.addElement(metaData.getColumnLabel(column+1));
                }
                while (resultSet.next()) {
                    Vector newRow = new Vector();
                    for (int i = 1; i <= numberOfColumns; i++) {
                        newRow.addElement(resultSet.getObject(i));
                    }
                    rows.addElement(newRow);
                }
                //this.table = new DefaultTableModel(rows,columnNames);
            }
            this.table = new DefaultTableModel(rows,columnNames);
            System.out.println(rows);
            System.out.println(columnNames);

            
        }
        catch(SQLException sqlException) {
            sqlException.printStackTrace();
            System.exit(1);
        }
        catch(ClassNotFoundException classNotFound) {
            classNotFound.printStackTrace();
            System.exit(1);
        }
        finally {
            try {
                statement.close();
                //pstatement.close();
                connection.close();
            }
            catch(Exception exception) {
                exception.printStackTrace();
                System.exit(1);
            }
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        jLabel1.setText("Atlanta Pet Adoption Consortium");

        jLabel2.setText("Adoptions for Shelter " + PetAdoptionConsortium.shelterName);

        jTable1.setModel(this.table);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Return to Menu");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 281, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        PetAdoptionConsortium.currentScreen = PetAdoptionConsortium.EMPLOYEE_MENU;
        PetAdoptionConsortium.changeScreen = true;// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
